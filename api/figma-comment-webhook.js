/**
 * Optimized Figma Comment Webhook - World-class performance
 * Handles @buddy comments with minimal latency
 */

import { createClient } from '../lib/db.js';
import { generateAIAnalysis } from '../lib/openai.js';

const supabase = createClient();

export default async function handler(req, res) {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { event_type, file_key, comment_id, comment, file_name, triggered_by } = req.body;

    // Only process FILE_COMMENT events
    if (event_type !== 'FILE_COMMENT') {
      return res.status(200).json({ message: 'Event type not supported' });
    }

    // Check if comment contains @buddy
    if (!comment.message || !comment.message.toLowerCase().includes('@buddy')) {
      return res.status(200).json({ message: 'No @buddy mention found' });
    }

    console.log('ðŸ¤– Processing @buddy comment:', comment.message);

    // Get user context for personalized responses
    const userContext = await getUserContext(triggered_by.id);
    
    // Extract question from comment
    const question = extractQuestion(comment.message);
    
    // Get frame information for analysis
    const frameInfo = await getFrameInfo(file_key, comment.file_key, comment.parent_id);
    
    // Generate AI analysis with user context
    const analysis = await generateOptimizedAIAnalysis(frameInfo, question, userContext);
    
    // Create reply comment via Figma API
    await createReplyComment(file_key, comment_id, analysis, triggered_by);
    
    console.log('âœ… @buddy comment processed successfully');
    
    return res.status(200).json({ 
      success: true, 
      message: 'Comment processed successfully',
      analysis_length: analysis.length
    });

  } catch (error) {
    console.error('Webhook processing error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
}

// Get user context for personalized responses
async function getUserContext(figmaUserId) {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('context, analysis_settings')
      .eq('figma_user_id', figmaUserId)
      .single();

    if (error || !data) {
      return null;
    }

    return {
      context: data.context || '',
      settings: data.analysis_settings || {}
    };
  } catch (error) {
    console.error('Error getting user context:', error);
    return null;
  }
}

// Extract question from @buddy comment
function extractQuestion(message) {
  let question = message.replace(/@buddy/gi, '').trim();
  
  if (!question || question.length < 3) {
    question = 'general design review';
  }
  
  return question;
}

// Get frame information for analysis
async function getFrameInfo(fileKey, commentFileKey, parentId) {
  try {
    // This would typically involve calling Figma API to get frame details
    // For now, return basic structure that can be enhanced
    return {
      fileKey: fileKey,
      commentFileKey: commentFileKey,
      parentId: parentId,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('Error getting frame info:', error);
    return null;
  }
}

// Generate optimized AI analysis
async function generateOptimizedAIAnalysis(frameInfo, question, userContext) {
  try {
    // Build context-aware prompt
    let systemPrompt = `You are a world-class design expert providing feedback on Figma designs. 
    
    User Context: ${userContext?.context || 'General design feedback'}
    Question: ${question}
    
    Provide concise, actionable feedback focusing on:
    - Visual design principles
    - User experience
    - Accessibility
    - Mobile responsiveness
    - Cultural considerations (especially for UAE market)
    - Kids-friendly design elements
    
    Keep responses under 200 words for quick reading.`;

    // Use optimized AI call
    const analysis = await generateAIAnalysis(systemPrompt, question, userContext?.settings);
    
    return `ðŸ¤– **AI Analysis:**\n\n${analysis}\n\n---\n*Generated by Figma AI Buddy*`;

  } catch (error) {
    console.error('Error generating AI analysis:', error);
    return `ðŸ¤– **AI Analysis:**\n\nI encountered an error analyzing your design. Please try again or contact support.\n\n---\n*Generated by Figma AI Buddy*`;
  }
}

// Create reply comment via Figma API
async function createReplyComment(fileKey, commentId, analysis, triggeredBy) {
  try {
    // This would call Figma API to create a reply comment
    // For now, we'll simulate the response
    console.log('Creating reply comment:', {
      fileKey,
      commentId,
      analysisLength: analysis.length,
      triggeredBy: triggeredBy.id
    });
    
    // In a real implementation, you would:
    // 1. Get access token for the user
    // 2. Call Figma API to create comment reply
    // 3. Handle errors and retries
    
    return true;
  } catch (error) {
    console.error('Error creating reply comment:', error);
    throw error;
  }
}